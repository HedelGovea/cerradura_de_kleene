/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package conjutos.ck.v.pkg1;

import java.awt.Image;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Set;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;

/**
 *
 * @author Hedel GH
 */
public class ventana extends javax.swing.JFrame {

    private ImageIcon imagen;
    private Icon icono;

    public ventana() {
        initComponents();
        this.setLocationRelativeTo(this);

        this.pintar_imagen(lblimagen1, "fondo.png");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        pantalla = new javax.swing.JTextArea();
        conjunto = new javax.swing.JTextField();
        union = new javax.swing.JButton();
        diferencia = new javax.swing.JButton();
        interseccion = new javax.swing.JButton();
        diferenciaS = new javax.swing.JButton();
        producto = new javax.swing.JButton();
        CKleen = new javax.swing.JButton();
        positiva = new javax.swing.JButton();
        ce = new javax.swing.JButton();
        operacios = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lblimagen1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pantalla.setColumns(20);
        pantalla.setRows(5);
        jScrollPane1.setViewportView(pantalla);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 423, -1));

        conjunto.setText("escribe los conjutos aqui");
        jPanel1.add(conjunto, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, 423, 30));

        union.setText("union");
        union.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unionActionPerformed(evt);
            }
        });
        jPanel1.add(union, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, 115, 45));

        diferencia.setText("diferencia");
        diferencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                diferenciaActionPerformed(evt);
            }
        });
        jPanel1.add(diferencia, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 240, 115, 45));

        interseccion.setText("interseccion");
        interseccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                interseccionActionPerformed(evt);
            }
        });
        jPanel1.add(interseccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 180, 115, 45));

        diferenciaS.setText("diferencia S");
        diferenciaS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                diferenciaSActionPerformed(evt);
            }
        });
        jPanel1.add(diferenciaS, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 240, 115, 45));

        producto.setText("producto");
        producto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productoActionPerformed(evt);
            }
        });
        jPanel1.add(producto, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 300, 115, 45));

        CKleen.setText("C Kleen");
        CKleen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CKleenActionPerformed(evt);
            }
        });
        jPanel1.add(CKleen, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 300, 115, 45));

        positiva.setText("C Positiva");
        positiva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                positivaActionPerformed(evt);
            }
        });
        jPanel1.add(positiva, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 240, 115, 45));

        ce.setText("C/E");
        ce.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ceActionPerformed(evt);
            }
        });
        jPanel1.add(ce, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 180, 115, 45));

        operacios.setText("=");
        operacios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                operaciosActionPerformed(evt);
            }
        });
        jPanel1.add(operacios, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 300, 115, 45));
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 430, 20));
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 20, 370));
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 0, 20, 370));
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 350, 430, 20));

        lblimagen1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.add(lblimagen1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 470, 370));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void unionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unionActionPerformed

        if (ban < 1) {

            parts1 = conjunto.getText();

            String[] A = parts1.split("\\,");       /// separador ("\\*")  split separara por elementos el string parts1 segun los asteriscos     
            System.out.println("mostramos la lista de arrays de(A) " + Arrays.asList(A));

            conju1 = new LinkedHashSet<String>();   //creamos nuestro hastset de string (conju1)  
            conju1.addAll(Arrays.asList(A));
            ban += 1;

        }
        System.out.println("hastset");
        System.out.println(conju1);
        pantalla.setText(conju1.toString() + "U");
        conjunto.setText("");

        op = 1;

// TODO add your handling code here:
    }//GEN-LAST:event_unionActionPerformed

    private void diferenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_diferenciaActionPerformed
        // TODO add your handling code here:
        if (ban < 1) {

            parts1 = conjunto.getText();

            String[] A = parts1.split("\\,");       /// separador ("\\*")  split separara por elementos el string parts1 segun los asteriscos     
            System.out.println("mostramos la lista de arrays de(A) " + Arrays.asList(A));

            conju1 = new LinkedHashSet<String>();   //creamos nuestro hastset de string (conju1)  
            conju1.addAll(Arrays.asList(A));
            ban += 1;

        }
        System.out.println("hastset");
        System.out.println(conju1);
        pantalla.setText(conju1.toString() + "!");
        conjunto.setText("");

        op = 3;

    }//GEN-LAST:event_diferenciaActionPerformed

    private void interseccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_interseccionActionPerformed

        if (ban < 1) {

            parts1 = conjunto.getText();

            String[] A = parts1.split("\\,");       /// separador ("\\*")  split separara por elementos el string parts1 segun los asteriscos     
            System.out.println("mostramos la lista de arrays de(A) " + Arrays.asList(A));

            conju1 = new LinkedHashSet<String>();   //creamos nuestro hastset de string (conju1)  
            conju1.addAll(Arrays.asList(A));
            ban += 1;

        }
        System.out.println("hastset");
        System.out.println(conju1);
        pantalla.setText(conju1.toString() + "S");
        conjunto.setText("");

        op = 2;

        // TODO add your handling code here:
    }//GEN-LAST:event_interseccionActionPerformed

    private void operaciosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_operaciosActionPerformed

        switch (op) {

            case 1:
                if (op != 0) {
                    parts2 = conjunto.getText();
                    String[] B = parts2.split("\\,");       /// separador ("\\*")  split separara por elementos el string parts1 segun los asteriscos     
                    System.out.println("mostramos la lista de arrays de(B) " + Arrays.asList(B));

                    Set<String> conju2 = new HashSet<String>();   //creamos nuestro hastset de string (conju1)  
                    conju2.addAll(Arrays.asList(B));

                    System.out.println("hastset");
                    System.out.println(conju2);

                    conju1 = new LinkedHashSet<String>(conju1);//creamos un nuevo conjuto resultado con los elentos del conjuto 1 (union_datos)
                    conju1.addAll(conju2);    //(addall)a este nuevo conjunto le añadimos los datos del conjuto2
                    System.out.print("case: 1 Union de conjunto A y B:");
                    System.out.println(conju1);

                    pantalla.setText(conju1.toString());
                    conjunto.setText("");
                }
                op = 0;
            case 2:
                if (op != 0) {
                    parts2 = conjunto.getText();
                    String[] B = parts2.split("\\,");
                    System.out.println("Case: 2 mostramos la lista de arrays de(A) " + Arrays.asList(B));

                    Set<String> conju2 = new HashSet<String>();
                    conju2.addAll(Arrays.asList(B));

                    System.out.println("conju1");
                    System.out.println(conju1);
                    System.out.println("coju2");
                    System.out.println(conju2);

                    conju1 = new LinkedHashSet<String>(conju1);//-------------------
                    conju1.retainAll(conju2);   //-----------------------
                    System.out.print("Union de conjunto A y B:");///----------------
                    System.out.println(conju1);//--------------------------------

                    pantalla.setText(conju1.toString());
                    conjunto.setText("");
                }

                op = 0;
            case 3:
                if (op != 0) {
                    parts2 = conjunto.getText();
                    String[] B = parts2.split("\\,");
                    System.out.println("Case: 2 mostramos la lista de arrays de(A) " + Arrays.asList(B));

                    Set<String> conju2 = new HashSet<String>();
                    conju2.addAll(Arrays.asList(B));

                    System.out.println("conju1");
                    System.out.println(conju1);
                    System.out.println("coju2");
                    System.out.println(conju2);

                    conju1 = new LinkedHashSet<String>(conju1);//-------------------
                    conju1.removeAll(conju2);   //-----------------------
                    System.out.print("diferencia A y B:");///----------------
                    System.out.println(conju1);//--------------------------------

                    pantalla.setText(conju1.toString());
                    conjunto.setText("");
                }

                op = 0;
            case 4:
                if (op != 0) {
                    parts2 = conjunto.getText();
                    String[] B = parts2.split("\\,");
                    System.out.println("Case: 2 mostramos la lista de arrays de(A) " + Arrays.asList(B));

                    Set<String> conju2 = new HashSet<String>();
                    conju2.addAll(Arrays.asList(B));

                    System.out.println("conju1");
                    System.out.println(conju1);
                    System.out.println("coju2");
                    System.out.println(conju2);

                    Set<String> diferencia1 = new LinkedHashSet<String>(conju1);
                    diferencia1.removeAll(conju2);
                    System.out.println("diferencia 1: " + diferencia1);

                    System.out.println(conju1);
                    Set<String> diferencia2 = new LinkedHashSet<String>(conju2);
                    diferencia2.removeAll(conju1);
                    System.out.println("diferencia 2: " + diferencia2);

                    conju1 = new LinkedHashSet<String>(diferencia1);//-------------------
                    conju1.addAll(diferencia2);   //-----------------------
                    System.out.print("diferencia A y B:");///----------------
                    System.out.println(conju1);//--------------------------------

                    pantalla.setText(conju1.toString());
                    conjunto.setText("");
                }

                op = 0;

            case 5:
                if (op != 0) {
                    Set<String> universo = new LinkedHashSet<String>();
                    parts2 = conjunto.getText();
                    String[] B = parts2.split("\\,");
                    System.out.println("Case: 5 mostramos la lista de arrays de(A) " + Arrays.asList(B));

                    Set<String> conju2 = new HashSet<String>();
                    conju2.addAll(Arrays.asList(B));

                    for (int i = 0; i < D.size(); i++) {
                        for (int j = 0; j < B.length; j++) {

                            System.out.print("{" + D.get(i) + ", " + B[j] + "}, ");

                            String r = D.get(i) + B[j];

                            System.out.println(r);

                            String[] tr = {r};

                            universo.add(r);

                        }
                    }
                    System.out.println("producto: de a y b:  " + universo);
                    conju1 = new LinkedHashSet<String>(universo);
                    pantalla.setText(conju1.toString());
                    conjunto.setText("");
                }
                op = 0;

            case 6:

                if (op != 0) {
                    ArrayList<String> alfabeto = new ArrayList<String>();
                    alfabeto.addAll(conju1);

                    int cardinalidad = alfabeto.size();
                    Ckleen(0, " ", alfabeto, cardinalidad);
                    System.out.println("este es : " + alfabeto);
                    System.out.println("cardinalida: " + cardinalidad);

                    pantalla.setText(alfabeto.toString());
                    conju1.clear();
                    conju1.addAll(alfabeto);
                }
                op = 0;

            case 7:
                if (op != 0) {
                    ArrayList<String> alfabeto = new ArrayList<String>();
                    alfabeto.addAll(conju1);

                    Set<String> posit = new LinkedHashSet<String>();

                    int cardinalidad = alfabeto.size();
                    Cpositiva(0, " ", alfabeto, cardinalidad, posit);
                    System.out.println("este es : " + posit);

                    pantalla.setText(posit.toString());
                    conju1.clear();
                    conju1.addAll(posit);
                }
                op = 0;

            case 8:

        }


    }//GEN-LAST:event_operaciosActionPerformed

    private void diferenciaSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_diferenciaSActionPerformed
        // TODO add your handling code here:

        if (ban < 1) {

            parts1 = conjunto.getText();

            String[] A = parts1.split("\\,");       /// separador ("\\*")  split separara por elementos el string parts1 segun los asteriscos     
            System.out.println("case: 1 mostramos la lista de arrays de(A) " + Arrays.asList(A));

            conju1 = new LinkedHashSet<String>();   //creamos nuestro hastset de string (conju1)  
            conju1.addAll(Arrays.asList(A));
            ban += 1;

        }
        System.out.println("hastset");
        System.out.println(conju1);
        pantalla.setText(conju1.toString() + "!S");
        conjunto.setText("");

        op = 4;


    }//GEN-LAST:event_diferenciaSActionPerformed

    private void productoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productoActionPerformed
        // TODO add your handling code here:

        if (ban < 1) {

            parts1 = conjunto.getText();

            String[] A = parts1.split("\\,");       /// separador ("\\*")  split separara por elementos el string parts1 segun los asteriscos     
            System.out.println("mostramos la lista de arrays de(A) " + Arrays.asList(A));

            conju1 = new LinkedHashSet<String>();   //creamos nuestro hastset de string (conju1)  
            conju1.addAll(Arrays.asList(A));

            D.addAll(conju1);
            ban += 1;

        }
        System.out.println("hastset");
        System.out.println(conju1);
        D.clear();
        D.addAll(conju1);
        pantalla.setText(conju1.toString() + "*");

        conjunto.setText("");

        op = 5;

    }//GEN-LAST:event_productoActionPerformed

    private void CKleenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CKleenActionPerformed
        // TODO add your handling code here:

        if (ban < 1) {

            parts1 = conjunto.getText();

            String[] A = parts1.split("\\,");       /// separador ("\\*")  split separara por elementos el string parts1 segun los asteriscos     
            System.out.println("case: 1 mostramos la lista de arrays de(A) " + Arrays.asList(A));

            conju1 = new LinkedHashSet<String>();   //creamos nuestro hastset de string (conju1)  
            conju1.addAll(Arrays.asList(A));
            ban += 1;

        }
        System.out.println("hastset");
        System.out.println(conju1);
        pantalla.setText(conju1.toString() + "Ç");
        conjunto.setText("");

        op = 6;

    }//GEN-LAST:event_CKleenActionPerformed

    private void positivaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_positivaActionPerformed
        // TODO add your handling code here:
        if (ban < 1) {

            parts1 = conjunto.getText();

            String[] A = parts1.split("\\,");       /// separador ("\\*")  split separara por elementos el string parts1 segun los asteriscos     
            System.out.println("case: positiva mostramos la lista de arrays de(A) " + Arrays.asList(A));

            conju1 = new LinkedHashSet<String>();   //creamos nuestro hastset de string (conju1)  
            conju1.addAll(Arrays.asList(A));
            ban += 1;

        }
        System.out.println("hastset");
        System.out.println(conju1);
        pantalla.setText(conju1.toString() + "Ç");
        conjunto.setText("");

        op = 7;

    }//GEN-LAST:event_positivaActionPerformed

    private void ceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ceActionPerformed
        // TODO add your handling code here:

        ban = 0;
        op = 0;
        conju1.clear();
        resultado.clear();
        D.clear();
        conjunto.setText("");
        pantalla.setText("");
    }//GEN-LAST:event_ceActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ventana().setVisible(true);
            }
        });

    }

    public void cargar1() {

    }

    private void pintar_imagen(JLabel lbl, String ruta) {
        this.imagen = new ImageIcon(ruta);
        this.icono = new ImageIcon(
                this.imagen.getImage().getScaledInstance(
                        lbl.getWidth(),
                        lbl.getHeight(),
                        Image.SCALE_DEFAULT
                )
        );

        lbl.setIcon(this.icono);
        this.repaint();

    }

    public void union(Set<String> conju1, Set<String> conju2) {

    }

    public static void Ckleen(int x, String r, ArrayList<String> alfabeto, int cardinalidad) {
        int repeticiones=0;
        repeticiones = (cardinalidad * cardinalidad)+cardinalidad;
        

        if (x < 5) {
            for (int i = 0; i < cardinalidad; i++) {
                System.out.print("{" + alfabeto.get(x) + "," + alfabeto.get(i) + "}");
                r = alfabeto.get(x) + alfabeto.get(i);
                alfabeto.add(r);
            }
            System.out.println("");
            Ckleen(x + 1, r, alfabeto, cardinalidad);
        }
        System.out.println("Repeticion Final: "+repeticiones);
       
    }

    public static void Cpositiva(int x, String r, ArrayList<String> alfabeto, int cardinalidad, Set<String> posit) {
    
        int repeticiones=0;
        double cuboC= Math.pow(cardinalidad, 3);
        double cuaC= Math.pow(cardinalidad, 2);
        repeticiones = (int) (cuboC + cuaC + cardinalidad);
        
        if (x < 5) {
            for (int i = 0; i < cardinalidad; i++) {
                System.out.print("{" + alfabeto.get(x) + "," + alfabeto.get(i) + "}");
                r = alfabeto.get(x) + alfabeto.get(i);
                alfabeto.add(r);
                posit.add(r);
            }
            System.out.println("");
            Cpositiva(x + 1, r, alfabeto, cardinalidad, posit);
        }
        System.out.println("Repeticion Final: "+repeticiones);
       
        
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CKleen;
    private javax.swing.JButton ce;
    private javax.swing.JTextField conjunto;
    private javax.swing.JButton diferencia;
    private javax.swing.JButton diferenciaS;
    private javax.swing.JButton interseccion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblimagen1;
    private javax.swing.JButton operacios;
    private javax.swing.JTextArea pantalla;
    private javax.swing.JButton positiva;
    private javax.swing.JButton producto;
    private javax.swing.JButton union;
    // End of variables declaration//GEN-END:variables

    String parts1;
    String parts2;
    int ban = 0;
    int op;
    Set<String> conju1 = new LinkedHashSet<String>();
    Set<String> resultado = new HashSet<String>();

    ArrayList<String> D = new ArrayList<String>();
}
